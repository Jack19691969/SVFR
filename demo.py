#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –≤–∏–¥–µ–æ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—é
"""

import cv2
import numpy as np
import os
from pathlib import Path
import argparse

def create_test_video(output_path="test_bw_video.mp4", duration=5, fps=30):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –≤–∏–¥–µ–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏
    
    Args:
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        fps: –∫–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É
    """
    width, height = 640, 480
    total_frames = duration * fps
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–µ–∫–∞
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height), isColor=False)
    
    print(f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {output_path}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {width}x{height}, {fps} FPS, {duration} —Å–µ–∫")
    
    for frame_num in range(total_frames):
        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        frame = np.zeros((height, width), dtype=np.uint8)
        
        # –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        for y in range(height):
            frame[y, :] = int(255 * (y / height))
        
        # –î–≤–∏–∂—É—â–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã
        t = frame_num / total_frames
        
        # –î–≤–∏–∂—É—â–∏–π—Å—è –∫—Ä—É–≥
        center_x = int(width * (0.2 + 0.6 * t))
        center_y = height // 3
        cv2.circle(frame, (center_x, center_y), 30, 200, -1)
        
        # –î–≤–∏–∂—É—â–∏–π—Å—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect_x = int(width * (0.8 - 0.6 * t))
        rect_y = 2 * height // 3
        cv2.rectangle(frame, (rect_x - 40, rect_y - 20), (rect_x + 40, rect_y + 20), 150, -1)
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        cv2.line(frame, (0, height // 2), (width, height // 2), 100, 2)
        
        # –¢–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–¥—Ä–∞
        text = f"Frame {frame_num + 1}/{total_frames}"
        cv2.putText(frame, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, 255, 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = np.random.randint(-20, 20, (height, width), dtype=np.int16)
        frame = np.clip(frame.astype(np.int16) + noise, 0, 255).astype(np.uint8)
        
        out.write(frame)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (frame_num + 1) % (fps // 2) == 0:
            progress = (frame_num + 1) / total_frames * 100
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
    
    out.release()
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
    return output_path


def run_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´ –ö–û–õ–û–†–ò–ó–ê–¶–ò–ò –í–ò–î–ï–û")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    test_video = create_test_video("demo_input.mp4", duration=3, fps=15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    required_files = ["main.py", "colorization_model.py", "utils.py"]
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return
    
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã...")
    try:
        from utils import print_system_info
        print_system_info()
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}")
    
    print(f"\nüé® –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: python main.py {test_video} -o demo_output.mp4 --preview")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—é
    import subprocess
    import sys
    
    try:
        result = subprocess.run([
            sys.executable, "main.py", test_video, 
            "-o", "demo_output.mp4", "--preview", "-v"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\n–§–∞–π–ª—ã:")
            print(f"  üìÅ –í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {test_video}")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: demo_output.mp4")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            if os.path.exists("demo_output.mp4"):
                input_size = os.path.getsize(test_video) / 1024  # KB
                output_size = os.path.getsize("demo_output.mp4") / 1024  # KB
                print(f"\n–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
                print(f"  üìä –í—Ö–æ–¥–Ω–æ–π: {input_size:.1f} KB")
                print(f"  üìä –í—ã—Ö–æ–¥–Ω–æ–π: {output_size:.1f} KB")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            print(result.stderr)
            
    except FileNotFoundError:
        print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ main.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def create_comparison_demo():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ"""
    print("\nüìä –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
    
    if not os.path.exists("demo_input.mp4") or not os.path.exists("demo_output.mp4"):
        print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–¥—Ä—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    cap_input = cv2.VideoCapture("demo_input.mp4")
    cap_output = cv2.VideoCapture("demo_output.mp4")
    
    # –ë–µ—Ä–µ–º –∫–∞–¥—Ä –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã
    frame_pos = int(cap_input.get(cv2.CAP_PROP_FRAME_COUNT) // 2)
    
    cap_input.set(cv2.CAP_PROP_POS_FRAMES, frame_pos)
    cap_output.set(cv2.CAP_PROP_POS_FRAMES, frame_pos)
    
    ret1, frame1 = cap_input.read()
    ret2, frame2 = cap_output.read()
    
    if ret1 and ret2:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –∫–∞–¥—Ä –≤ RGB –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if len(frame1.shape) == 2:
            frame1 = cv2.cvtColor(frame1, cv2.COLOR_GRAY2BGR)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = np.hstack([frame1, frame2])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(comparison, 'Original (B&W)', (10, 30), font, 0.8, (255, 255, 255), 2)
        cv2.putText(comparison, 'Colorized', (frame1.shape[1] + 10, 30), font, 0.8, (255, 255, 255), 2)
        
        cv2.imwrite("demo_comparison.jpg", comparison)
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: demo_comparison.jpg")
    
    cap_input.release()
    cap_output.release()


def cleanup_demo_files():
    """–£–¥–∞–ª—è–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    demo_files = ["demo_input.mp4", "demo_output.mp4", "demo_comparison.jpg"]
    
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for file in demo_files:
        if os.path.exists(file):
            os.remove(file)
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file}")


def main():
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
    parser.add_argument("--cleanup", action="store_true", help="–£–¥–∞–ª–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    parser.add_argument("--create-video", action="store_true", help="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
    parser.add_argument("--comparison", action="store_true", help="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    
    args = parser.parse_args()
    
    if args.cleanup:
        cleanup_demo_files()
        return
    
    if args.create_video:
        create_test_video()
        return
    
    if args.comparison:
        create_comparison_demo()
        return
    
    # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    run_demo()
    create_comparison_demo()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("python demo.py --cleanup")


if __name__ == "__main__":
    main()
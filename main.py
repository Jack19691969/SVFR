#!/usr/bin/env python3
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ –≤–∏–¥–µ–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: AI Assistant
"""

import argparse
import os
import sys
from pathlib import Path
import time

try:
    from colorization_model import VideoColorizer
    from tqdm import tqdm
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)


def progress_callback(current, total):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    percentage = (current / total) * 100
    bar_length = 50
    filled_length = int(bar_length * current // total)
    bar = '‚ñà' * filled_length + '-' * (bar_length - filled_length)
    print(f'\r–ü—Ä–æ–≥—Ä–µ—Å—Å: |{bar}| {percentage:.1f}% ({current}/{total})', end='', flush=True)


def validate_input_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    valid_extensions = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm'}
    file_ext = Path(file_path).suffix.lower()
    
    if file_ext not in valid_extensions:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: {file_ext}")
    
    return True


def generate_output_path(input_path, output_dir=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    input_path = Path(input_path)
    
    if output_dir:
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        output_path = output_dir / f"{input_path.stem}_colorized{input_path.suffix}"
    else:
        output_path = input_path.parent / f"{input_path.stem}_colorized{input_path.suffix}"
    
    return str(output_path)


def main():
    parser = argparse.ArgumentParser(
        description="–ö–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py input.mp4
  python main.py input.mp4 -o colorized_output.mp4
  python main.py input.mp4 -o ./results/ --model weights.pth
  python main.py input.mp4 --cpu
        """
    )
    
    parser.add_argument(
        'input',
        help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —á–µ—Ä–Ω–æ-–±–µ–ª–æ–º—É –≤–∏–¥–µ–æ'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ä—è–¥–æ–º —Å –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _colorized)'
    )
    
    parser.add_argument(
        '--model',
        help='–ü—É—Ç—å –∫ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    
    parser.add_argument(
        '--cpu',
        action='store_true',
        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU –≤–º–µ—Å—Ç–æ GPU'
    )
    
    parser.add_argument(
        '--preview',
        action='store_true',
        help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        validate_input_file(args.input)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
        if args.output:
            if os.path.isdir(args.output):
                output_path = generate_output_path(args.input, args.output)
            else:
                output_path = args.output
        else:
            output_path = generate_output_path(args.input)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if args.cpu:
            device = 'cpu'
        else:
            import torch
            device = 'cuda' if torch.cuda.is_available() else 'cpu'
        
        print("=" * 60)
        print("üé® –ü–†–û–ì–†–ê–ú–ú–ê –ö–û–õ–û–†–ò–ó–ê–¶–ò–ò –í–ò–î–ï–û")
        print("=" * 60)
        print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.input}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
        print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}")
        if args.model:
            print(f"üß† –ú–æ–¥–µ–ª—å: {args.model}")
        if args.preview:
            print("üëÅÔ∏è  –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (100 –∫–∞–¥—Ä–æ–≤)")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ç–æ—Ä
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
        colorizer = VideoColorizer(model_path=args.model, device=device)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # –ö–æ–ª–æ—Ä–∏–∑—É–µ–º –≤–∏–¥–µ–æ
        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—é...")
        
        if args.preview:
            # –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            temp_colorizer = PreviewColorizer(colorizer, max_frames=100)
            temp_colorizer.colorize_video(args.input, output_path, progress_callback)
        else:
            colorizer.colorize_video(args.input, output_path, progress_callback)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚úÖ –ö–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
        input_size = os.path.getsize(args.input) / (1024 * 1024)  # MB
        output_size = os.path.getsize(output_path) / (1024 * 1024)  # MB
        
        print(f"üìä –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {input_size:.2f} MB")
        print(f"üìä –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_size:.2f} MB")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


class PreviewColorizer:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    
    def __init__(self, colorizer, max_frames=100):
        self.colorizer = colorizer
        self.max_frames = max_frames
    
    def colorize_video(self, input_path, output_path, progress_callback=None):
        import cv2
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(input_path)
        
        if not cap.isOpened():
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {input_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        total_frames = min(int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), self.max_frames)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–µ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
        
        frame_count = 0
        
        print(f"üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {total_frames} –∫–∞–¥—Ä–æ–≤")
        
        while frame_count < self.max_frames:
            ret, frame = cap.read()
            if not ret:
                break
            
            # –ö–æ–ª–æ—Ä–∏–∑—É–µ–º –∫–∞–¥—Ä
            colorized_frame = self.colorizer.colorize_frame(frame)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            out.write(colorized_frame)
            
            frame_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if progress_callback:
                progress_callback(frame_count, total_frames)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        cap.release()
        out.release()


if __name__ == "__main__":
    main()
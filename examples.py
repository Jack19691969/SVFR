#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from colorization_model import VideoColorizer
from utils import get_video_info, is_grayscale_video, create_comparison_image
import cv2
import numpy as np


def example_1_basic_colorization():
    """–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞"""
    print("üé® –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–¥—Ä–∞")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    height, width = 300, 400
    test_image = np.zeros((height, width, 3), dtype=np.uint8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    cv2.circle(test_image, (100, 100), 50, (128, 128, 128), -1)  # –°–µ—Ä—ã–π –∫—Ä—É–≥
    cv2.rectangle(test_image, (200, 150), (350, 250), (200, 200, 200), -1)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    cv2.line(test_image, (0, 200), (width, 200), (64, 64, 64), 5)  # –¢–µ–º–Ω–æ-—Å–µ—Ä–∞—è –ª–∏–Ω–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cv2.imwrite("test_bw_image.jpg", test_image)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: test_bw_image.jpg")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ç–æ—Ä
    try:
        colorizer = VideoColorizer(device='cpu')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        
        # –ö–æ–ª–æ—Ä–∏–∑—É–µ–º –∫–∞–¥—Ä
        colorized = colorizer.colorize_frame(test_image)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cv2.imwrite("test_colorized_image.jpg", colorized)
        print("‚úÖ –ö–æ–ª–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: test_colorized_image.jpg")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = create_comparison_image(test_image, colorized, "comparison_example1.jpg")
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: comparison_example1.jpg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 1: {e}")


def example_2_video_analysis():
    """–ü—Ä–∏–º–µ—Ä 2: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    print("\nüîç –ü—Ä–∏–º–µ—Ä 2: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    test_video = "example_video.mp4"
    
    if not os.path.exists(test_video):
        print("üìπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
        create_simple_test_video(test_video)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        info = get_video_info(test_video)
        
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ {test_video}:")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {info['width']}x{info['height']}")
        print(f"   FPS: {info['fps']:.2f}")
        print(f"   –ö–∞–¥—Ä–æ–≤: {info['frame_count']}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration']:.2f} —Å–µ–∫")
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info['file_size']:.2f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –ª–∏ –≤–∏–¥–µ–æ
        is_bw = is_grayscale_video(test_video, sample_frames=5)
        print(f"   –ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ: {'–î–∞' if is_bw else '–ù–µ—Ç'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 2: {e}")


def example_3_batch_processing():
    """–ü—Ä–∏–º–µ—Ä 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤"""
    print("\nüì¶ –ü—Ä–∏–º–µ—Ä 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
        frames = []
        for i in range(3):
            frame = create_test_frame(i)
            frames.append(frame)
            cv2.imwrite(f"test_frame_{i}.jpg", frame)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(frames)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ç–æ—Ä
        colorizer = VideoColorizer(device='cpu')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        for i, frame in enumerate(frames):
            print(f"üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä {i+1}/{len(frames)}...")
            
            colorized = colorizer.colorize_frame(frame)
            output_path = f"colorized_frame_{i}.jpg"
            cv2.imwrite(output_path, colorized)
            
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        print("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 3: {e}")


def example_4_custom_settings():
    """–ü—Ä–∏–º–µ—Ä 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("-" * 40)
    
    try:
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        devices = ['cpu']
        
        # –î–æ–±–∞–≤–ª—è–µ–º GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import torch
            if torch.cuda.is_available():
                devices.append('cuda')
        except ImportError:
            pass
        
        for device in devices:
            print(f"üñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ—Ä–∏–∑–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            colorizer = VideoColorizer(device=device)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä
            test_frame = create_test_frame(0)
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            import time
            start_time = time.time()
            
            # –ö–æ–ª–æ—Ä–∏–∑—É–µ–º
            colorized = colorizer.colorize_frame(test_frame)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_path = f"colorized_{device}.jpg"
            cv2.imwrite(output_path, colorized)
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ 4: {e}")


def create_test_frame(frame_id):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    height, width = 240, 320
    frame = np.zeros((height, width, 3), dtype=np.uint8)
    
    # –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    for y in range(height):
        intensity = int(255 * (y / height))
        frame[y, :] = intensity
    
    # –û–±—ä–µ–∫—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç ID –∫–∞–¥—Ä–∞
    if frame_id == 0:
        # –ö—Ä—É–≥–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        cv2.circle(frame, (80, 80), 30, (200, 200, 200), -1)
        cv2.circle(frame, (240, 160), 40, (150, 150, 150), -1)
    elif frame_id == 1:
        # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        cv2.rectangle(frame, (50, 50), (150, 100), (180, 180, 180), -1)
        cv2.rectangle(frame, (200, 120), (280, 180), (120, 120, 120), -1)
    else:
        # –õ–∏–Ω–∏–∏ –∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        points = np.array([[100, 50], [150, 100], [100, 150], [50, 100]], np.int32)
        cv2.fillPoly(frame, [points], (160, 160, 160))
        cv2.line(frame, (0, height//2), (width, height//2), (100, 100, 100), 3)
    
    return frame


def create_simple_test_video(output_path, duration=2, fps=10):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ"""
    width, height = 320, 240
    total_frames = duration * fps
    
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height), isColor=False)
    
    for frame_num in range(total_frames):
        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –∫–∞–¥—Ä
        frame = np.zeros((height, width), dtype=np.uint8)
        
        # –î–≤–∏–∂—É—â–∏–π—Å—è –æ–±—ä–µ–∫—Ç
        t = frame_num / total_frames
        x = int(width * t)
        y = height // 2
        
        cv2.circle(frame, (x, y), 20, 200, -1)
        cv2.rectangle(frame, (10, 10), (50, 50), 150, -1)
        
        out.write(frame)
    
    out.release()
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")


def cleanup_examples():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    files_to_remove = [
        "test_bw_image.jpg", "test_colorized_image.jpg", "comparison_example1.jpg",
        "example_video.mp4", "colorized_cpu.jpg", "colorized_cuda.jpg"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for i in range(3):
        files_to_remove.extend([
            f"test_frame_{i}.jpg",
            f"colorized_frame_{i}.jpg"
        ])
    
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤...")
    removed_count = 0
    
    for file in files_to_remove:
        if os.path.exists(file):
            os.remove(file)
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file}")
            removed_count += 1
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
    print("üé® –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´ –ö–û–õ–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        example_1_basic_colorization()
        example_2_video_analysis()
        example_3_batch_processing()
        example_4_custom_settings()
        
        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        response = input("\n–£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/N): ").lower()
        if response == 'y':
            cleanup_examples()
        else:
            print("üìÅ –§–∞–π–ª—ã –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
    parser.add_argument("--example", type=int, choices=[1,2,3,4], 
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä")
    parser.add_argument("--cleanup", action="store_true", 
                       help="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    args = parser.parse_args()
    
    if args.cleanup:
        cleanup_examples()
    elif args.example:
        examples = {
            1: example_1_basic_colorization,
            2: example_2_video_analysis,
            3: example_3_batch_processing,
            4: example_4_custom_settings
        }
        examples[args.example]()
    else:
        main()